## Get angle between two points
function getAngleBetweenPoints pLoc1 pLoc2
   
   put item 1 of pLoc2 - item 1 of pLoc1 into tX
   put item 2 of pLoc2 - item 2 of pLoc1 into tY
   
   return round(atan2(tY, tX) * (180 / pi));
   
end getAngleBetweenPoints

## Get mid point between two points
function getMidPoint pLoc1, pLoc2
   
   put item 1 of pLoc1 + item 1 of pLoc2 into tX
   put item 2 of pLoc1 + item 2 of pLoc2 into tY
   
   return tX / 2, tY / 2
   
end getMidPoint

## Sets control icon from a card of image sources
command setControlIcon pCtrlName, pCardName, pImageName, pSrcCard
   
   set the icon of the control pCtrlName of cd pCardName to the id of image pImageName of the card pSrcCard
   
end setControlIcon

## Cancel messages (currently covers AE)
command cancelPendingMessages
   
   aeStopMoving "all"
   
   lock messages
   repeat for each line tMessage in the pendingMessages
      if tMessage contains "animateBackground" or tMessage contains "aeGeneral" or tMessage contains "aeMoveTo" or tMessage contains "fade" then
         cancel item 1 of tMessage // Item 1 is the message ID
      end if
   end repeat
   unlock messages
   
end cancelPendingMessages

## Cancel all pending messages (including any that the engine/IDE may generate)
command cancelAllPendingMessages
   
   lock messages
   repeat for each line tMessage in the pendingMessages
      cancel item 1 of tMessage
   end repeat
   unlock messages
   
end cancelAllPendingMessages

## Go through all controls in a card and delete them
command deleteControlsFromCard pCardName
   
   put the number of controls of cd pCardName into tCount
   
   repeat with x = tCount down to 1
      delete control x of cd pCardName
   end repeat
   
end deleteControlsFromCard

## Get the centroid of tripod
function getTriangleCentroid x1, x2, x3, y1, y2, y3
   
   return (x1 + x2 +x3) / 3, (y1 + y2 +y3) / 3
   
end getTriangleCentroid

## Delete all custom properties from with set pSet of stack
command clearCustomPropertySet pSet
   
   local tSet   
   put the customProperties[pSet] of the current stack into tSet   
   
   repeat for each line tKey in the keys of tSet       
      delete variable tSet[tkey]      
   end repeat
   
   set the customProperties[pSet] of the current stack to tSet
   
end clearCustomPropertySet

## Center on X axis
command centerX pElement
   
   local tX, tY
   
   put item 1 of the loc of this card into tX // Get center of card
   put item 2 of the loc of pElement into tY // Get current Y loc of control
   
   set the loc of control pElement to tX, tY // Center on X axis
   
end centerX

-- Set card in IDE to correct height and position
command setIDECardHeight
   
   set the height of the current stack to 1136
   set the top of the current stack to 50
   
end setIDECardHeight

-- Shows a popover
-- PARAMETERS: 
-- pName: the name you want to give to the popover
--    pMessage: the text you want to appear in the popover
-- pObj: the existing object you want popover to point to 
command showPopover pName, pMessage, pObj
   local tPopoverPadding, tButtonPadding, tAnimOffset, tAnimSpeed, tObjectType, tIconId, tEndX
   
   put 20 into tPopoverPadding
   put 0 into tButtonPadding
   put 30 into tAnimOffset
   put 350 into tAnimSpeed
   
   if not isAnimating() and the cPopoverAnimating of this stack is false then
      
      set the cPopoverAnimating of this stack to true -- Flag that popover is animating
      
      copy group "popover" of cd "elements" to this cd -- Clone popover
      set the name of it to pName
      put pMessage into fld "text" of group pName -- Put text into popover
      
      -- Is this a button and does it have an icon?
      put word 1 of pObj into tObjectType
      if tObjectType is "button" and the icon of pObj > 0 then
         put the icon of pObj into tIconId
         put (the width of pObj - the width of image id tIconId) / 2 into tButtonPadding -- Work out the padding around the icon
      end if
      
      -- Size and position popover text content
      set the height of fld "text" of group pName to the formattedHeight of fld "text" of group pName
      set the width of fld "text" of group pName to the formattedWidth of fld "text" of group pName
      set the loc of fld "text" of group pName to item 1 of the loc of graphic "shape" of group pName, item 2 of the loc of graphic "shape" of group pName
      
      -- Resize rectangle to match content
      set the width of graphic "shape" of group pName to the width of fld "text" of group pName + tPopoverPadding
      set the height of graphic "shape" of group pName to the height of fld "text" of group pName + tPopoverPadding
      set the right of graphic "point" of group pName to the left of graphic "shape" of group pName + 8 -- Position pointer to left of popover
      
      -- Position the popover
      put round(item 1 of the loc of pObj + (the width of pObj / 2) + (the width of group pName / 2) - tButtonPadding) into tEndX -- This is where the popover will end uip
      set the loc of group pName to tEndX - tAnimOffset, item 2 of the loc of pObj -- Offset for move animation   
      
      -- If the popover extends beyond the right of the screen, move it to the left of the pObj
      if the right of group pName + tAnimOffset > the right of this card then
         
         set the angle of graphic "point" of group pName to 0 -- Face pointer to right
         set the left of graphic "point" of group pName to the right of graphic "shape" of group pName - 8 -- Position pointer to right of popover
         set the right of group pName to the left of pObj + tButtonPadding + tAnimOffset -- Position popover to the left of the pObj
         put item 1 of the loc of group pName - tAnimOffset into tEndx -- Get new end point
         
      end if
      
      set the layer of group pName to top
      aeLockMoves
      aeMoveTo the long id of group pName,tEndX,item 2 of the loc of group pName,tAnimSpeed,"out" -- Perform move animation
      aeFadeIn the long id of group pName, 200 -- Fade in popover
      aeUnlockMoves
      
   end if
   
end showPopover

function hasTutorial
   
   put "set" & the cCurrentSet of stack "tripods" & "_level" & the cCurrentLevel of stack "tripods" into tCurrentLevel -- Get name of current level's custom property
   put the customProperties[tCurrentLevel] of this stack into tLevelProperties -- Get level's custom properties
   put the number of items in tLevelProperties[cTutorial] into tLevelTutorial -- Get level's tutorial custom property
   
   -- If there's a tutorial for this level, delete any popovers
   if tLevelTutorial is not "0" then
      return true
   else
      return false
   end if
   
end hasTutorial

-- Returns array of IDs of visible tutorial popover groups
function getTutorialPopovers
   local tPopovers, tIndex, tControlCount
   
   put 1 into tIndex
   put the number of controls of this cd into tControlCount -- Get number of controls of card
   put empty into tPopovers
   
   repeat with x = tControlCount down to 1
      if the cPopover of control x is true and the visible of control x is true then -- If it's a visible popover
         put the long id of control x of this card into tPopovers[tIndex]
         put tIndex + 1 into tIndex
      end if
   end repeat
   
   return tPopovers
   
end getTutorialPopovers

-- Hides all tutorial popovers in current card
command removeTutorialPopovers
   local tCount, tFadeSpeed, tCurrentLevel, tLevelProperties, tPopovers, tNumberOfPopovers
   
   -- If there's a tutorial for this level, and the user has been following it, delete any popovers
   if hasTutorial() and the cTutorialToggle of this stack is true then
      
      put 50 into tFadeSpeed
      put tFadeSpeed * 5 into tTimeOffset -- Time in millisecs after fadeout at which element is deleted
      
      put getTutorialPopovers() into tPopovers
      put the number of lines of (the keys of tPopovers) into tNumberOfPopovers
      
      if tNumberOfPopovers is not empty then -- If there popovers (i.e. where user hasn't tapped on them to make them disappear)
         repeat with x = 1 to tNumberOfPopovers
            set the cPopoverAnimating of this stack to true -- Flag that we're animating popover fadeout
            aeFadeOut tPopovers[x], tFadeSpeed
            send "deleteTutorialPopover tPopovers[x], x, tNumberOfPopovers" to this cd in tTimeOffset millisecs -- Offset to avoid causing error in AE
         end repeat
      end if
   end if
end removeTutorialPopovers

-- Delete tutorial popup object from the card
command deleteTutorialPopover pPopoverGroupId, pArrayIndex, pNumberOfPopovers
   
   delete pPopoverGroupId
   
   if pArrayIndex = pNumberOfPopovers then
      set the cPopoverAnimating of this stack to false
   end if
   
end deleteTutorialPopover

## Modification of aeFadeIn which lightly highlights button when touched
on aeTouchButtonFadeIn pControl,pDuration
   local tTarget
   if there is no pControl then return "aeError: "&pControl&&"is not a valid control reference"
   if pDuration is not a number then return "aeError: Duration is not a number"
   set the blendlevel of pControl to 100
   set the visible of pControl to true
   replace quote with "§$aeQuote$§" in pControl
   put the long id of the target into tTarget
   replace quote with "§$aeQuote$§" in tTarget
   _aeTouchButtonFadeIn pControl,pDuration,the millisecs,tTarget
end aeTouchButtonFadeIn

on _aeTouchButtonFadeIn pControl,pDuration,pStart,pTarget
   local tControl,tTarget
   put pControl into tControl
   replace  "§$aeQuote$§" with quote in tControl
   local tElapsed,tValue
   put the millisecs - pStart into tElapsed
   put round(aeEaseIn(1,50,pDuration,tElapsed,1)) into tValue
   set the blendlevel of tControl to 100-tValue
   if tElapsed<pDuration then
      send "_aeTouchButtonFadeIn" && pControl,pDuration,pStart,pTarget to me in 25 millisecs
   else
      put pTarget into tTarget
      replace  "§$aeQuote$§" with quote in tTarget
      send "aeTouchButtonFadeInDone" to tTarget
   end if
end _aeTouchButtonFadeIn

on aeTouchButtonFadeInDone
   // trapped to avoid errors
end aeTouchButtonFadeInDone

## Modification of aeFadeOut which lightly highlights button when touched
on aeTouchButtonFadeOut pControl,pDuration
   local tTarget
   if there is no pControl then return "aeError: "&pControl&&"is not a valid control reference"
   if pDuration is not a number then return "aeError: Duration is not a number"
   set the blendlevel of pControl to 0
   set the visible of pControl to true
   replace quote with "§$aeQuote$§" in pControl
   put the long id of the target into tTarget
   replace quote with "§$aeQuote$§" in tTarget
   _aeTouchButtonFadeOut pControl,pDuration,the millisecs,tTarget
end aeTouchButtonFadeOut

on _aeTouchButtonFadeOut pControl,pDuration,pStart,pTarget
   local tControl,tTarget
   put pControl into tControl
   replace  "§$aeQuote$§" with quote in tControl
   local tElapsed,tValue
   put the millisecs - pStart into tElapsed
   put round(aeEaseIn(50,0,pDuration,tElapsed,1)) into tValue
   set the blendlevel of tControl to tValue
   if tElapsed<pDuration then
      send "_aeTouchButtonFadeOut" && pControl,pDuration,pStart,pTarget to me in 25 millisecs
   else
      put pTarget into tTarget
      replace  "§$aeQuote$§" with quote in tTarget
      send "aeTouchButtonFadeOutDone" to tTarget
      hide tControl
      set the blendlevel of tControl  to 0
   end if
end _aeTouchButtonFadeOut

on aeTouchButtonFadeOutDone
   // trapped to avoid errors
end aeTouchButtonFadeOutDone

## Attempt to optimize aeFadeIn as the pivot fade in post-jump aren't always 100% smooth
on aePivotFadeIn pControl,pDuration
   if there is no pControl then return "aeError: "&pControl&&"is not a valid control reference"
   if pDuration is not a number then return "aeError: Duration is not a number"
   set the blendlevel of pControl to 100
   set the visible of pControl to true
   replace quote with "§$aeQuote$§" in pControl
   put the long id of the target into tTarget
   replace quote with "§$aeQuote$§" in tTarget
   _aePivotFadeIn pControl,pDuration,the millisecs,tTarget
end aePivotFadeIn

on _aePivotFadeIn pControl,pDuration,pStart,pTarget   
   put pControl into tControl
   replace  "§$aeQuote$§" with quote in tControl
   put the millisecs - pStart into tElapsed
   put round(aeEaseIn(0,100,pDuration,tElapsed,1)) into tValue
   set the blendlevel of tControl to 100-tValue
   if tElapsed<pDuration then
      send "_aePivotFadeIn" && pControl,pDuration,pStart,pTarget to me in 22 millisecs
   else
      put pTarget into tTarget
      replace  "§$aeQuote$§" with quote in tTarget
      //send "aeFadeInDone" to tTarget
   end if
end _aePivotFadeIn
